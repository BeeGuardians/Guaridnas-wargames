name: Deploy CTF Problems

on:
  push:
    paths:
      - '*/*'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.filter.outputs.folders }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed top-level folders
        id: detect
        run: |
          echo "üîç Detecting changed top-level folders..."

          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            PREV_COMMIT=$(git rev-parse HEAD~1)
            CUR_COMMIT=$(git rev-parse HEAD)
            RAW=$(git diff --name-only "$PREV_COMMIT" "$CUR_COMMIT")
          else
            echo "‚ö†Ô∏è No previous commit. Using HEAD only."
            RAW=$(git show --pretty="" --name-only HEAD)
          fi

          CHANGED=$(echo "$RAW" | awk -F/ '{print $1}' | sort -u)
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"

      - name: Get mentioned folders in commit description (comma-separated)
        id: commitmsg
        run: |
          DESCRIPTION=$(git log -1 --pretty=%B)

          # Ï§ÑÎ∞îÍøà Ïù¥ÌõÑ Ï†ÑÏ≤¥Î•º ÏâºÌëúÎ°ú ÌååÏã±
          LIST_LINE=$(echo "$DESCRIPTION" | tail -n +2 | tr -d '\n')

          echo "üì© Commit description list line:"
          echo "$LIST_LINE"

          # ÏâºÌëú Í∏∞Ï§ÄÏúºÎ°ú ÏûêÎ•¥Í≥† ÏñëÏ™Ω Í≥µÎ∞± Ï†úÍ±∞
          MENTIONED=$(echo "$LIST_LINE" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sort -u)
          echo "mentioned=$MENTIONED" >> "$GITHUB_OUTPUT"

      - name: Intersect changed and mentioned folders
        id: filter
        run: |
          CHANGED="${{ steps.detect.outputs.changed }}"
          MENTIONED="${{ steps.commitmsg.outputs.mentioned }}"

          echo "üì¶ Changed folders: $CHANGED"
          echo "üìù Mentioned folders: $MENTIONED"

          INTERSECT=""
          for folder in $CHANGED; do
            if echo "$MENTIONED" | grep -qw "$folder"; then
              INTERSECT="$INTERSECT $folder"
            fi
          done

          INTERSECT=$(echo "$INTERSECT" | xargs -n1 | sort -u)
          echo "‚úÖ Final filtered folders:"
          echo "$INTERSECT"

          if [ -z "$INTERSECT" ]; then
            echo 'folders=[]' | tee -a "$GITHUB_OUTPUT"
          else
            JSON_ARRAY=$(echo "$INTERSECT" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "folders=$JSON_ARRAY" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: Show final filtered folders (for debug)
        run: echo "Folders: ${{ steps.filter.outputs.folders }}"

  deploy:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.folders != '' && needs.detect-changes.outputs.folders != '[]' }}
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.folders) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build and push Docker image to ECR
        run: |
          IMAGE_NAME=public.ecr.aws/i7t0x0a1/gaurdians/wargames
          IMAGE_TAG=${{ matrix.folder }}

          echo "üöß Building image $IMAGE_NAME:$IMAGE_TAG"
          docker build -t $IMAGE_NAME:$IMAGE_TAG ./${{ matrix.folder }}
          docker push $IMAGE_NAME:$IMAGE_TAG

      - name: Upload ZIP archive to S3 (based on .upload-include)
        run: |
          FOLDER="${{ matrix.folder }}"
          ZIP_NAME="${FOLDER}.zip"

          cd "$FOLDER"

          if [ ! -f ".upload-include" ]; then
            echo "‚ùå .upload-include not found in $FOLDER. Skipping..."
            exit 1
          fi

          echo "üì¶ Creating zip with files listed in .upload-include..."
          INCLUDE_FILES=$(cat .upload-include | xargs)

          zip -r "../$ZIP_NAME" $INCLUDE_FILES

          cd ..

          echo "üöÄ Uploading $ZIP_NAME to S3..."
          aws s3 cp "$ZIP_NAME" "s3://s3-guardians-dev/wargame_zips/$ZIP_NAME"
